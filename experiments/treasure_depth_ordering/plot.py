import matplotlib.pyplot as plt
import pandas as pd
import scipy.stats as st
from scipy import stats

treasures = [[3, 13], [4, 22], [3, 15], [8, 23], [9, 28], [3, 14], [9, 27], [5, 20], [10, 32], [7, 32], [10, 26],
             [9, 26], [5, 19], [4, 17], [7, 21], [8, 32], [8, 31], [3, 13], [9, 26], [5, 24], [9, 35], [6, 28], [6, 30],
             [4, 19], [4, 20], [6, 21], [9, 26], [8, 29], [3, 14], [3, 12], [8, 22], [10, 30], [6, 25], [4, 22],
             [5, 23], [7, 26], [7, 22], [3, 18], [4, 16], [6, 30], [3, 12], [6, 26], [9, 25], [10, 25], [7, 27],
             [10, 27], [6, 21], [5, 26], [6, 21], [10, 37], [6, 23], [3, 16], [10, 24], [8, 27], [4, 18], [5, 26],
             [4, 21], [3, 13], [6, 19], [3, 16], [8, 26], [8, 30], [8, 24], [7, 28], [10, 25], [3, 13], [6, 24],
             [10, 36], [9, 35], [6, 24], [10, 26], [8, 29], [3, 16], [4, 16], [4, 18], [10, 34], [4, 21], [5, 27],
             [8, 33], [5, 22], [5, 22], [5, 26], [7, 30], [10, 23], [10, 36], [5, 20], [3, 12], [4, 22], [6, 18],
             [8, 31], [7, 27], [10, 33], [6, 25], [7, 29], [9, 32], [5, 27], [9, 22], [10, 24], [5, 21], [6, 21],
             [10, 26], [8, 35], [6, 29], [3, 14], [6, 25], [9, 33], [4, 15], [10, 24], [3, 18], [9, 33], [10, 30],
             [7, 32], [4, 19], [6, 29], [8, 33], [10, 28], [8, 22], [10, 25], [3, 12], [10, 30], [5, 27], [8, 33],
             [3, 15], [10, 23], [6, 28], [7, 29], [8, 33], [7, 25], [4, 18], [8, 28], [7, 20], [4, 18], [10, 34],
             [9, 29], [7, 29], [9, 24], [8, 28], [8, 29], [9, 35], [3, 13], [7, 20], [6, 23], [6, 30], [8, 35], [9, 32],
             [6, 27], [5, 24], [5, 24], [10, 36], [9, 25], [4, 16], [9, 26], [10, 32], [4, 20], [8, 31], [4, 20],
             [3, 14], [3, 14], [6, 21], [5, 27], [7, 21], [4, 19], [3, 17], [8, 31], [8, 28], [3, 15], [9, 34], [7, 26],
             [10, 29], [9, 24], [6, 25], [3, 15], [9, 32], [8, 28], [6, 22], [5, 24], [7, 23], [9, 27], [8, 33],
             [7, 29], [9, 23], [9, 28], [7, 29], [5, 27], [5, 18], [9, 27], [10, 30], [3, 13], [8, 35], [7, 24],
             [6, 19], [3, 16], [3, 14], [3, 14], [6, 26], [5, 27], [8, 29], [9, 23], [7, 22], [4, 16], [9, 22], [3, 18],
             [9, 35], [3, 13], [6, 26], [5, 19], [5, 26], [8, 27], [4, 16], [10, 33], [6, 23], [6, 25], [6, 28],
             [6, 27], [4, 16], [9, 36], [9, 22], [4, 15], [6, 19], [6, 24], [6, 18], [10, 31], [10, 27], [10, 29],
             [6, 19], [8, 24], [5, 17], [4, 17], [5, 20], [5, 21], [10, 37], [9, 27], [9, 27], [5, 27], [9, 27],
             [10, 26], [5, 18], [10, 32], [4, 21], [6, 26], [6, 20], [8, 35], [5, 17], [10, 29], [5, 19], [6, 20],
             [7, 22], [7, 31], [3, 13], [9, 24], [3, 13], [4, 22], [5, 21], [8, 32], [5, 22], [9, 25], [3, 12], [9, 35],
             [3, 17], [6, 23], [9, 32], [7, 30], [5, 17], [3, 17], [3, 13], [7, 22], [10, 35], [7, 29], [9, 24],
             [10, 23], [4, 19], [10, 23], [8, 29], [5, 23], [8, 27], [6, 18], [4, 19], [3, 14], [10, 34], [6, 30],
             [6, 28], [3, 16], [4, 15], [9, 30], [6, 18], [5, 25], [4, 23], [9, 35], [4, 21], [8, 29], [3, 16],
             [10, 26], [5, 20], [3, 12], [6, 19], [6, 19], [4, 20], [5, 20], [5, 26], [4, 23], [4, 23], [10, 32],
             [6, 26], [4, 23], [8, 29], [8, 34], [7, 25], [3, 18], [4, 22], [10, 30], [3, 18], [6, 23], [4, 21],
             [7, 23], [3, 13], [9, 30], [6, 30], [5, 19], [8, 34], [7, 23], [4, 22], [10, 33], [3, 14], [8, 22],
             [10, 26], [8, 32], [10, 29], [6, 23], [8, 22], [5, 23], [9, 36], [4, 16], [6, 29], [3, 14], [6, 28],
             [8, 34], [8, 26], [3, 17], [6, 26], [10, 24], [9, 26], [7, 20], [9, 32], [7, 32], [7, 29], [6, 22],
             [4, 16], [10, 24], [4, 21], [6, 30], [9, 26], [10, 26], [3, 17], [8, 34], [7, 22], [6, 22], [5, 24],
             [10, 30], [5, 25], [6, 26], [3, 15], [7, 31], [7, 32], [8, 22], [9, 26], [8, 32], [8, 27], [10, 24],
             [9, 36], [6, 24], [3, 12], [10, 31], [10, 27], [7, 27], [3, 16], [10, 27], [8, 33], [6, 26], [7, 27],
             [7, 21], [6, 25], [8, 21], [9, 36], [3, 15], [10, 37], [7, 23], [6, 18], [9, 25], [6, 21], [9, 27],
             [4, 18], [3, 16], [4, 23], [5, 27], [7, 32], [6, 29], [3, 18], [3, 14], [7, 20], [3, 18], [6, 28], [6, 29],
             [8, 29], [9, 22], [8, 25], [7, 27], [10, 32], [10, 30], [4, 19], [10, 29], [4, 20], [4, 20], [10, 24],
             [8, 21], [5, 21], [3, 12], [7, 32], [6, 26], [9, 34], [8, 21], [3, 18], [5, 23], [9, 26], [4, 20], [4, 23],
             [10, 27], [7, 21], [7, 27], [9, 24], [3, 16], [4, 19], [8, 27], [6, 28], [5, 18], [10, 36], [4, 21],
             [6, 18], [4, 15], [10, 34], [7, 20], [3, 12], [4, 21], [5, 17], [9, 32], [7, 27], [8, 23], [7, 29],
             [4, 22], [7, 25], [8, 29], [9, 30], [6, 22], [9, 27], [8, 21], [5, 24], [3, 13], [5, 21], [9, 23], [3, 14],
             [6, 30], [10, 37], [8, 22], [9, 23], [6, 25], [7, 28], [5, 26], [10, 31], [6, 25], [6, 22], [4, 20],
             [7, 31], [6, 27], [9, 32], [5, 24], [6, 27], [4, 19], [5, 18], [4, 16], [6, 19], [6, 28], [6, 30], [3, 14],
             [9, 27], [3, 12], [5, 25], [3, 15], [7, 29], [3, 15], [8, 32], [7, 30], [8, 31], [9, 32], [6, 29], [3, 17],
             [3, 17], [7, 23], [6, 21], [4, 15], [10, 26], [6, 28]]

# treasures = [
#     [10, 47],
#     [9, 35],
#     [8, 36],
#     [7, 30],
#     [6, 36],
#     [5, 24],
#     [4, 26],
#     [3, 15],
#     [2, 7],
#     [1, 5],
# ]
treasures2 = [
    [10, 47],
    [1, 4],
    [9, 46],
    [2, 10],
    [8, 38],
    [3, 17],
    [7, 30],
    [4, 25],
    [6, 33],
    [5, 27],

]
treasuresDepthAvg = {
    1: 4,
    2: 9,
    3: 15,
    4: 23,
    5: 27,
    6: 30,
    7: 33,
    8: 35,
    9: 37,
    10: 38
}
treasuresDepthMin = {
    # 1: 3,
    # 2: 12,
    3: 12,
    4: 15,
    5: 17,
    6: 18,
    7: 20,
    8: 21,
    9: 22,
    10: 23
}

# treasuresDepthMin = {
#     1: 3,
#     2: 7,
#     3: 12,
#     4: 18,
#     5: 21,
#     6: 23,
#     7: 25,
#     8: 27,
#     9: 28,
#     10: 29
# }


def get_best_distribution(data):
    dist_names = ["norm", "exponweib", "weibull_max", "weibull_min", "pareto", "genextreme"]
    dist_results = []
    params = {}
    for dist_name in dist_names:
        dist = getattr(st, dist_name)
        param = dist.fit(data)

        params[dist_name] = param
        # Applying the Kolmogorov-Smirnov test
        D, p = st.kstest(data, dist_name, args=param)
        print("p value for " + dist_name + " = " + str(p))
        dist_results.append((dist_name, p))

    # select the best fitted distribution
    best_dist, best_p = (max(dist_results, key=lambda item: item[1]))
    # store the name of the best fit and its p value

    print("Best fitting distribution: " + str(best_dist))
    print("Best p value: " + str(best_p))
    print("Parameters for the best fit: " + str(params[best_dist]))

    return best_dist, best_p, params[best_dist]


if __name__ == '__main__':
    # treasures = sorted(treasures)
    treasures = treasures[:500]

    df = pd.DataFrame(data=treasures, index=None)
    df.columns = ['depth', 'coins']

    df['coef'] = df['coins'] / df['depth'].apply(lambda x: treasuresDepthMin[x])
    df['coins_per_depth'] = df['coins'] / df['depth']

    # df.sort_values(by=['depth'], inplace=True)
    # df.sort_values(by=['coins'], inplace=True)
    df.drop(columns=["coins", "depth", "coef"], inplace=True)
    # df.sort_values(by=['coef'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    # treasuresDepths = sorted(treasuresDepths)

    df2 = pd.DataFrame(data=treasures2, index=None)
    df2.columns = ['depth', 'coins']
    df2['coef'] = df2['coins'] / df2['depth'].apply(lambda x: treasuresDepthMin[x])
    df2['coins_per_depth'] = df2['coins'] / df2['depth']

    df2.drop(columns=["coins", "depth", "coef"], inplace=True)

    print(df.describe())

    k2, p = stats.normaltest(df["coins_per_depth"])
    alpha = 1e-3

    print("p = {:g}".format(p))

    if p < alpha:  # null hypothesis: x comes from a normal distribution
        print("The null hypothesis can be rejected")

    get_best_distribution(df["coins_per_depth"])

    fig = plt.figure(figsize=(20, 2))
    ax = fig.add_subplot(111)

    ax.plot(df, marker='o')
    ax.plot(df2, marker='o')

    # plt.yticks([1, 2])
    # plt.xscale()

    plt.show()
